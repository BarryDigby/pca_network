mrna_attributes = read.csv("/data/github/pca_network/results/TCGA_mrna_attributes.txt", header=T, sep="\t")
version_to_id = merge(signf, mrna_attributes, by.x="ensembl", by.y="ensembl_gene_id")
sub_atlas = scaled[which(rownames(scaled) %in% version_to_id$ensembl_gene_id_version),]
sub_atlas = merge(sub_atlas, version_to_id[,5:6], by.x=0, by.y="ensembl_gene_id_version")
sub_atlas = tibble::column_to_rownames(sub_atlas, "external_gene_name")
sub_atlas = sub_atlas[,c(2:ncol(sub_atlas))]
sub_atlas = sub_atlas[,which(colnames(sub_atlas) %in% rownames(tcga_meta))]
##########################################################################
# Prepare X, Y matrices for LASSO COX
# X = signf genes
# Y = time to death, os status
##########################################################################
sub_meta = subset(tcga_meta, select=c(days_to_death, os_status))
x = as.matrix(t(sub_atlas))
y = sub_meta
y$os_status = as.numeric(as.character(y$os_status))
y = as.matrix(y)
set.seed(123)
cv.fit <- cv.glmnet(x, y, family="cox", alpha=1, maxit = 1000, lambda = NULL, type.measure = "deviance")
View(y)
View(tcga_meta)
#########################################################################
# load tcga survival data (NA's supplemented by hand using human protein atlas)
# load TCGA RDS - metadata is better than Biolinks.
# Requires removing last character to match atlas samples
# time to death in months, conv to days for consistency w P atlas
##########################################################################
atlas_meta = read.csv("/data/github/pca_network/data/tcga_updated_meta.csv", header=T, sep=",")
rownames(atlas_meta) = atlas_meta$sample
atlas_meta = atlas_meta[which(atlas_meta$sample %in% colnames(atlas_mat)),]
#########################################################################
# load tcga survival data (NA's supplemented by hand using human protein atlas)
# load TCGA RDS - metadata is better than Biolinks.
# Requires removing last character to match atlas samples
# time to death in months, conv to days for consistency w P atlas
##########################################################################
atlas_meta = read.csv("/data/github/pca_network/data/tcga_updated_meta.csv", header=T, sep=",")
rownames(atlas_meta) = atlas_meta$sample
View(atlas_meta)
atlas_mat = read.csv("/data/github/pca_network/data/prad_rna_cancer_sample.tsv", header=T, sep="\t")
atlas_mat = atlas_mat[,c(1,2,4)]
atlas_mat <- atlas_mat %>%
pivot_wider(names_from = Sample, values_from = FPKM, values_fill = 0)
atlas_mat = tibble::column_to_rownames(atlas_mat, "Gene")
#########################################################################
# load TCGA metadata from Protein Atlas.
# Why protein atlas? There is no missing information for both
# time to death (days_to_follow_up) and vital status (outcome survival)
# This is crucial for downstream LASSO cox modelling
# Two vital status are 'not reported' which I can live with!
##########################################################################
atlas_meta = read.csv("/data/github/pca_network/data/tcga_updated_meta.csv", header=T, sep=",")
rownames(atlas_meta) = atlas_meta$sample
atlas_meta = atlas_meta[which(atlas_meta$sample %in% colnames(atlas_mat)),]
rem = !(atlas_meta$vital=="Not Reported")
atlas_meta = atlas_meta[rem,]
atlas_mat = atlas_mat[,rem]
#########################################################################
# stage mrnas in ceRNA network
# Atlas FPKM uses Ensembl v109 ensembl_gene_ids.
# Load parsed GTF file to make sure HGNC maps to correct ensembl id
#########################################################################
network = read.csv("/data/github/pca_network/results/circ_mirna_mrna_network.txt", header=T, sep="\t")
genes = unique(network$mrna)
ensv109 = read.csv("/data/github/pca_network/data/ensembl_v109_proteinatlas.csv", sep="\t", header = F)
colnames(ensv109) = c("ensembl_gene_id", "biotype", "hgnc_symbol")
ensv109 = ensv109[which(ensv109$biotype=="protein_coding"),]
ensv109 = ensv109[which(ensv109$hgnc_symbol %in% genes),]
gene_ids = ensv109[,c(3,1)]
result = data.frame(gene = character(),
ensembl = character(),
best_cutoff = numeric(),
pvalue = numeric())
for(i in 1:nrow(gene_ids)){
name = gene_ids[i,1]
ens  = gene_ids[i,2]
# 4 genes are not in atlas DF as ENS. Info lost.
if(ens %in% rownames(atlas_mat)){
mat  = data.frame(t(atlas_mat[which(rownames(atlas_mat)==ens),]))
mat  = merge(mat, atlas_meta, by.x=0, by.y="sample_id")
colnames(mat)[2] = name
mat$status = ifelse(mat$vital=="Dead", 1, 0)
best_thresh = roc(mat$status, mat[,2])
best_thresh = coords(best_thresh, x="best")
mat$high_low = ifelse(mat[,2] > best_thresh[1,1], "High", "Low")
res.cox = survfit(Surv(days_to_follow_up, status) ~ high_low, data=mat)
res.cox.pval = surv_pvalue(res.cox)
pval = res.cox.pval$pval
if( pval < 0.05 ){
row = data.frame(gene=name, ensembl = ens, best_cutoff=best_thresh[1,1], pvalue=pval)
result = rbind(result,row)
}
}
}
mat  = data.frame(t(atlas_mat[which(rownames(atlas_mat)==ens),]))
mat  = merge(mat, atlas_meta, by.x=0, by.y="sample")
for(i in 1:nrow(gene_ids)){
name = gene_ids[i,1]
ens  = gene_ids[i,2]
# 4 genes are not in atlas DF as ENS. Info lost.
if(ens %in% rownames(atlas_mat)){
mat  = data.frame(t(atlas_mat[which(rownames(atlas_mat)==ens),]))
mat  = merge(mat, atlas_meta, by.x=0, by.y="sample")
colnames(mat)[2] = name
mat$status = ifelse(mat$vital=="Dead", 1, 0)
best_thresh = roc(mat$status, mat[,2])
best_thresh = coords(best_thresh, x="best")
mat$high_low = ifelse(mat[,2] > best_thresh[1,1], "High", "Low")
res.cox = survfit(Surv(days_to_follow_up, status) ~ high_low, data=mat)
res.cox.pval = surv_pvalue(res.cox)
pval = res.cox.pval$pval
if( pval < 0.05 ){
row = data.frame(gene=name, ensembl = ens, best_cutoff=best_thresh[1,1], pvalue=pval)
result = rbind(result,row)
}
}
}
signf = result[which(result$pvalue < 0.01),]
##########################################################################
# Sanity check:
# check how many signf genes are prognostic according to protein atlas
##########################################################################
prog_pca = read.csv("/data/github/pca_network/results/prognostic_prostate.tsv", header=T, sep="\t")
table(prog_pca$Gene %in% signf$gene)
##########################################################################
# Stage data for LASSO Cox:
# Use normalised, scaled and centered STAR counts data for modelling
# need to convert ENSG version IDs to HGNC symbols
# match samples in metadata
##########################################################################
scaled = read.csv("/data/github/pca_network/results/TCGA_mrna_scaled.txt", header=T, row.names = 1, sep="\t")
colnames(scaled) = gsub("\\.", "-", colnames(scaled))
mrna_attributes = read.csv("/data/github/pca_network/results/TCGA_mrna_attributes.txt", header=T, sep="\t")
version_to_id = merge(signf, mrna_attributes, by.x="ensembl", by.y="ensembl_gene_id")
sub_atlas = scaled[which(rownames(scaled) %in% version_to_id$ensembl_gene_id_version),]
sub_atlas = merge(sub_atlas, version_to_id[,5:6], by.x=0, by.y="ensembl_gene_id_version")
sub_atlas = tibble::column_to_rownames(sub_atlas, "external_gene_name")
sub_atlas = sub_atlas[,c(2:ncol(sub_atlas))]
View(atlas_meta)
sub_atlas = sub_atlas[,which(colnames(sub_atlas) %in% rownames(atlas_meta))]
##########################################################################
# Prepare X, Y matrices for LASSO COX
# X = signf genes
# Y = time to death, os status
##########################################################################
sub_meta = subset(atlas_meta, select=c(days_to_follow_up, status))
##########################################################################
# Prepare X, Y matrices for LASSO COX
# X = signf genes
# Y = time to death, os status
##########################################################################
sub_meta = subset(atlas_meta, select=c(days_to_follow_up, vital))
atlas_meta$status = ifelse(atlas_meta$vital=="Dead", 1, 0)
##########################################################################
# Prepare X, Y matrices for LASSO COX
# X = signf genes
# Y = time to death, os status
##########################################################################
sub_meta = subset(atlas_meta, select=c(days_to_follow_up, status))
View(sub_meta)
x = as.matrix(t(sub_atlas))
y = sub_meta
y = as.matrix(y)
View(y)
set.seed(123)
cv.fit <- cv.glmnet(x, y, family="cox", alpha=1, maxit = 1000, lambda = NULL, type.measure = "deviance")
y = sub_meta
y$status = as.numeric(as.character(y$status))
y = as.matrix(y)
set.seed(123)
cv.fit <- cv.glmnet(x, y, family="cox", alpha=1, maxit = 1000, lambda = NULL, type.measure = "deviance")
y = sub_meta
y$status = factor(y$status)
y = as.matrix(y)
set.seed(123)
cv.fit <- cv.glmnet(x, y, family="cox", alpha=1, maxit = 1000, lambda = NULL, type.measure = "deviance")
y = sub_meta
colnames(y) = c("time", "status")
y = as.matrix(y)
set.seed(123)
cv.fit <- cv.glmnet(x, y, family="cox", alpha=1, maxit = 1000, lambda = NULL, type.measure = "deviance")
fit = glmnet(x, y, family = "cox", alpha=1, maxit = 1000, lambda=NULL)
Coefficients <- coef(fit, s = cv.fit$lambda.min)
Active.Index <- which(Coefficients != 0)
Active.Coefficients <- Coefficients[Active.Index]
Active.Genes <- Coefficients@Dimnames[[1]][Active.Index]
View(x)
#!/usr/bin/env Rscript
library(tidyr)
library(dplyr)
library(survival)
library(survminer)
library(pROC)
library(glmnet)
##########################################################################
# load human protein atlas FPKM data (only tumor samples)
##########################################################################
atlas_mat = read.csv("/data/github/pca_network/data/prad_rna_cancer_sample.tsv", header=T, sep="\t")
atlas_mat = atlas_mat[,c(1,2,4)]
atlas_mat <- atlas_mat %>%
pivot_wider(names_from = Sample, values_from = FPKM, values_fill = 0)
atlas_mat = tibble::column_to_rownames(atlas_mat, "Gene")
#########################################################################
# load TCGA metadata from Protein Atlas.
# Why protein atlas? There is no missing information for both
# time to death (days_to_follow_up) and vital status (outcome survival)
# This is crucial for downstream LASSO cox modelling
# Two vital status are 'not reported' which I can live with!
# encode vital as numeric
##########################################################################
atlas_meta = read.csv("/data/github/pca_network/data/tcga_updated_meta.csv", header=T, sep=",")
rownames(atlas_meta) = atlas_meta$sample
atlas_meta = atlas_meta[which(atlas_meta$sample %in% colnames(atlas_mat)),]
rem = !(atlas_meta$vital=="Not Reported")
atlas_meta = atlas_meta[rem,]
atlas_mat = atlas_mat[,rem]
atlas_meta$status = ifelse(atlas_meta$vital=="Dead", 1, 0)
#########################################################################
# stage mrnas in ceRNA network
# Atlas FPKM uses Ensembl v109 ensembl_gene_ids.
# Load parsed GTF file to make sure HGNC maps to correct ensembl id
#########################################################################
network = read.csv("/data/github/pca_network/results/circ_mirna_mrna_network.txt", header=T, sep="\t")
genes = unique(network$mrna)
ensv109 = read.csv("/data/github/pca_network/data/ensembl_v109_proteinatlas.csv", sep="\t", header = F)
colnames(ensv109) = c("ensembl_gene_id", "biotype", "hgnc_symbol")
ensv109 = ensv109[which(ensv109$biotype=="protein_coding"),]
ensv109 = ensv109[which(ensv109$hgnc_symbol %in% genes),]
gene_ids = ensv109[,c(3,1)]
#########################################################################
# Univariate Cox proportional hazards regression:
# Find ceRNA mRNAs ** with prognosis of PCa (Overall survival)
#########################################################################
options(scipen = 999)
result = data.frame(gene = character(),
ensembl = character(),
best_cutoff = numeric(),
pvalue = numeric())
for(i in 1:nrow(gene_ids)){
name = gene_ids[i,1]
ens  = gene_ids[i,2]
# 4 genes are not in atlas DF as ENS. Info lost.
if(ens %in% rownames(atlas_mat)){
mat  = data.frame(t(atlas_mat[which(rownames(atlas_mat)==ens),]))
mat  = merge(mat, atlas_meta, by.x=0, by.y="sample")
colnames(mat)[2] = name
best_thresh = roc(mat$status, mat[,2])
best_thresh = coords(best_thresh, x="best")
mat$high_low = ifelse(mat[,2] > best_thresh[1,1], "High", "Low")
res.cox = survfit(Surv(days_to_follow_up, status) ~ high_low, data=mat)
res.cox.pval = surv_pvalue(res.cox)
pval = res.cox.pval$pval
if( pval < 0.05 ){
row = data.frame(gene=name, ensembl = ens, best_cutoff=best_thresh[1,1], pvalue=pval)
result = rbind(result,row)
}
}
}
#########################################################################
# Protein atlas defines prognostic genes as being < 0.01.
# This helps the LASSO cox model by reducing input features.
#########################################################################
signf = result[which(result$pvalue < 0.01),]
##########################################################################
# Sanity check:
# check how many signf genes are prognostic according to protein atlas
##########################################################################
prog_pca = read.csv("/data/github/pca_network/results/prognostic_prostate.tsv", header=T, sep="\t")
table(prog_pca$Gene %in% signf$gene)
#########################################################################
# produce plots for each ** mRNA:
### Scatter histogram of dead/alive
### kaplan-meier plot
### overlay manually in inkscape
#########################################################################
# for(i in 1:nrow(signf)){
#   row = as.data.frame(signf[i,])
#   gene = row$gene
#   ens = row$ensembl
#   opt = row$best_cutoff
#
#   mat = data.frame(t(atlas_mat[which(rownames(atlas_mat)==ens),]))
#   mat = merge(mat, tcga_meta, by.x=0, by.y="sample_id")
#   mat$hi_lo = ifelse(mat[,2] > opt, "high", "low")
#   surv = survfit(Surv(days_to_follow_up, status) ~ hi_lo, data=mat)
#
#   # scatterhist
#   p <- mat %>% arrange(vital) %>% ggscatterhist(mat,  x=paste0(ens), y="years_to_follow_up", palette = c("royalblue3","red1"),
#                                                 ylab = "Time after diagnosis (years)", xlab = "Expression level (FPKM)", fill = "vital",
#                                                 color="vital", shape="vital", alpha = 0.9, ggtheme = theme_bw(), size = 2,
#                                                 margin.params = list(fill="vital"), margin.plot = "density", legend = "top")
#
#   p$sp <- p$sp + geom_vline(xintercept = opt, linetype = "dashed", color = "black")
#
#   pdf(paste0("/data/github/pca_network/results/surv_plots/",gene,"_scatter.pdf"), height=3, width=6)
#   print(p)
#   dev.off()
#
#   # survival
#   p1 <- ggsurvplot(surv, pval = TRUE, conf.int = F, risk.table = F, # Add risk table
#                    risk.table.col = "strata", # Change risk table color by groups
#                    linetype = "strata", # Change line type by groups
#                    surv.median.line = "none", # Specify median survival
#                    ggtheme = theme_bw(), # Change ggplot2 theme
#                    palette = c("red1", "royalblue3"),
#                    data=mat, xlab="Time (days)")
#   # tweak to widt = scat width afte rremoving rhs hist
#   pdf(paste0("/data/github/pca_network/results/surv_plots/",gene,"_survival.pdf"), height=3, width=5.1)
#   print(p1)
#   dev.off()
# }
##########################################################################
# Sanity check:
# check how many signf genes are prognostic according to protein atlas
##########################################################################
prog_pca = read.csv("/data/github/pca_network/results/prognostic_prostate.tsv", header=T, sep="\t")
table(prog_pca$Gene %in% signf$gene)
##########################################################################
# Stage data for LASSO Cox:
# Use normalised, scaled and centered STAR counts data for modelling
# need to convert ENSG version IDs to HGNC symbols
# match samples in metadata
##########################################################################
scaled = read.csv("/data/github/pca_network/results/TCGA_mrna_scaled.txt", header=T, row.names = 1, sep="\t")
colnames(scaled) = gsub("\\.", "-", colnames(scaled))
mrna_attributes = read.csv("/data/github/pca_network/results/TCGA_mrna_attributes.txt", header=T, sep="\t")
version_to_id = merge(signf, mrna_attributes, by.x="ensembl", by.y="ensembl_gene_id")
sub_atlas = scaled[which(rownames(scaled) %in% version_to_id$ensembl_gene_id_version),]
sub_atlas = merge(sub_atlas, version_to_id[,5:6], by.x=0, by.y="ensembl_gene_id_version")
sub_atlas = tibble::column_to_rownames(sub_atlas, "external_gene_name")
sub_atlas = sub_atlas[,c(2:ncol(sub_atlas))]
sub_atlas = sub_atlas[,which(colnames(sub_atlas) %in% rownames(atlas_meta))]
##########################################################################
# Prepare X, Y matrices for LASSO COX
# X = signf genes
# Y = time to death, os status
##########################################################################
sub_meta = subset(atlas_meta, select=c(days_to_follow_up, status))
x = as.matrix(t(sub_atlas))
y = sub_meta
colnames(y) = c("time", "status")
y = as.matrix(y)
set.seed(123)
cv.fit <- cv.glmnet(x, y, family="cox", alpha=1, maxit = 1000, lambda = NULL, type.measure = "deviance")
fit = glmnet(x, y, family = "cox", alpha=1, maxit = 1000, lambda=NULL)
Coefficients <- coef(fit, s = cv.fit$lambda.min)
Active.Index <- which(Coefficients != 0)
Active.Coefficients <- Coefficients[Active.Index]
Active.Genes <- Coefficients@Dimnames[[1]][Active.Index]
##########################################################################
# Prepare X, Y matrices for LASSO COX
# X = signf genes
# Y = time to death, os status
##########################################################################
sub_meta = atlas_meta[,c(8,7)]
View(atlas_meta)
View(sub_meta)
sub_meta$vital = ifelse(sub_meta$vital=="Dead", 1,0)
sub_meta$vital = factor(sub_meta$vital)
colnames(sub_meta) = c("time", "status")
x = as.matrix(t(sub_atlas))
y = sub_meta
colnames(y) = c("time", "status")
y = as.matrix(y)
set.seed(123)
cv.fit <- cv.glmnet(x, y, family="cox", alpha=1, maxit = 1000, lambda = NULL, type.measure = "deviance")
fit = glmnet(x, y, family = "cox", alpha=1, maxit = 1000, lambda=NULL)
Coefficients <- coef(fit, s = cv.fit$lambda.min)
Active.Index <- which(Coefficients != 0)
load("/data/github/pca_network/results/LASSO_cox.RData")
x = as.data.frame(x)
x = x[,colnames(x) %in% Active.Genes]
risk_scores <- rowSums(Active.Coefficients * x)
x = cbind(x, sub_meta)
x$risk_score = risk_scores
x$risk_score_cat = ifelse(x$risk_score > mean(x$risk_score), "high", "low")
surv_object <- Surv(x$time, as.numeric(x$status))
res2 = survfit(surv_object ~ risk_score_cat, data=x)
ggsurvplot(res2,
pval = TRUE, conf.int = T,
risk.table = T, # Add risk table
#risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
#ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("red1", "royalblue3"),
data=x,xlab="Time (days)")
sub_atlas = scaled[which(rownames(scaled) %in% version_to_id$ensembl_gene_id_version),]
sub_atlas = merge(sub_atlas, version_to_id[,5:6], by.x=0, by.y="ensembl_gene_id_version")
sub_atlas = tibble::column_to_rownames(sub_atlas, "external_gene_name")
sub_atlas = sub_atlas[,c(2:ncol(sub_atlas))]
sub_atlas = sub_atlas[,rownames(atlas_meta)]
View(sub_atlas)
##########################################################################
# Prepare X, Y matrices for LASSO COX
# X = signf genes
# Y = time to death, os status
##########################################################################
sub_meta = atlas_meta[,c(8,7)]
sub_meta$vital = ifelse(sub_meta$vital=="Dead", 1,0)
sub_meta$vital = factor(sub_meta$vital)
colnames(sub_meta) = c("time", "status")
x = as.matrix(t(sub_atlas))
y = sub_meta
colnames(y) = c("time", "status")
y = as.matrix(y)
set.seed(123)
cv.fit <- cv.glmnet(x, y, family="cox", alpha=1, maxit = 1000, lambda = NULL, type.measure = "deviance")
fit = glmnet(x, y, family = "cox", alpha=1, maxit = 1000, lambda=NULL)
Coefficients <- coef(fit, s = cv.fit$lambda.min)
Active.Index <- which(Coefficients != 0)
Active.Coefficients <- Coefficients[Active.Index]
Active.Genes <- Coefficients@Dimnames[[1]][Active.Index]
Active.Coefficients
##########################################################################
# Prepare X, Y matrices for LASSO COX
# X = signf genes
# Y = time to death, os status
##########################################################################
sub_meta = subset(atlas_meta, select=c(days_to_follow_up, status))
View(sub_meta)
colnames(sub_meta) = c("time", "status")
x = as.matrix(t(sub_atlas))
y = sub_meta
y = as.matrix(y)
set.seed(123)
cv.fit <- cv.glmnet(x, y, family="cox", alpha=1, maxit = 1000, lambda = NULL, type.measure = "deviance")
fit = glmnet(x, y, family = "cox", alpha=1, maxit = 1000, lambda=NULL)
Coefficients <- coef(fit, s = cv.fit$lambda.min)
Active.Index <- which(Coefficients != 0)
Active.Coefficients <- Coefficients[Active.Index]
Active.Genes <- Coefficients@Dimnames[[1]][Active.Index]
Active.Genes
Active.Coefficients
x = as.data.frame(x)
x = x[,colnames(x) %in% Active.Genes]
risk_scores <- rowSums(Active.Coefficients * x)
x = cbind(x, sub_meta)
x$risk_score = risk_scores
x$risk_score_cat = ifelse(x$risk_score > mean(x$risk_score), "high", "low")
surv_object <- Surv(x$time, as.numeric(x$status))
res2 = survfit(surv_object ~ risk_score_cat, data=x)
logrank = survdiff(surv_object ~ risk_score_cat, data=x)
ggsurvplot(res2,
pval = TRUE, conf.int = T,
risk.table = T, # Add risk table
#risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
#ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("red1", "royalblue3"),
data=x,xlab="Time (days)")
set.seed(123)
cv.fit <- cv.glmnet(x, y, family="cox", alpha=1, maxit = 1000, lambda = NULL, type.measure = "deviance")
x = as.data.frame(x)
x = x[,colnames(x) %in% Active.Genes]
risk_scores <- rowSums(Active.Coefficients * x)
x = cbind(x, sub_meta)
x$risk_score = risk_scores
x$risk_score_cat = ifelse(x$risk_score > mean(x$risk_score), "high", "low")
surv_object <- Surv(x$time, as.numeric(x$status))
res2 = survfit(surv_object ~ risk_score_cat, data=x)
ggsurvplot(res2,
pval = TRUE, conf.int = T,
risk.table = T, # Add risk table
#risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
#ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("red1", "royalblue3"),
data=x,xlab="Time (days)")
model_result = data.frame(Active.Coefficients = Active.Coefficients,
Active.Genes = Active.Genes)
View(model_result)
load("/data/github/pca_network/results/prognostic_model.RData")
x = as.data.frame(x)
x = x[,colnames(x) %in% Active.Genes]
risk_scores <- rowSums(Active.Coefficients * x)
x = cbind(x, sub_meta)
x$risk_score = risk_scores
x$risk_score_cat = ifelse(x$risk_score > mean(x$risk_score), "high", "low")
surv_object <- Surv(x$time, as.numeric(x$status))
res2 = survfit(surv_object ~ risk_score_cat, data=x)
logrank = survdiff(surv_object ~ risk_score_cat, data=x)
ggsurvplot(res2,
pval = TRUE, conf.int = T,
risk.table = T, # Add risk table
#risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
#ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("red1", "royalblue3"),
data=x,xlab="Time (days)")
x = as.data.frame(x)
x = x[,colnames(x) %in% Active.Genes]
risk_scores <- rowSums(Active.Coefficients * x)
x = cbind(x, sub_meta)
x$risk_score = risk_scores
x$risk_score_cat = ifelse(x$risk_score > median(x$risk_score), "high", "low")
surv_object <- Surv(x$time, as.numeric(x$status))
res2 = survfit(surv_object ~ risk_score_cat, data=x)
ggsurvplot(res2,
pval = TRUE, conf.int = T,
risk.table = T, # Add risk table
#risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
#ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("red1", "royalblue3"),
data=x,xlab="Time (days)")
hist(x$risk_score)
vline(median(x$risk_score))
