ggplot(tidy_df, aes(x = Variable, y = Score, fill = risk_category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "E") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 4000, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
ggplot(tidy_df, aes(x = Variable, y = Score, fill = risk_category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "E") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 4250, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
pdf("/data/github/pca_network/results/TCGA_DFS/ESTIMATE.pdf", width=8, height=6)
ggplot(tidy_df, aes(x = Variable, y = Score, fill = risk_category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "E") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 4250, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
dev.off()
pdf("/data/github/pca_network/results/TCGA_DFS/TILs.pdf", width=12, height=6)
ggplot(wide_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "E") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 1.5, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
dev.off()
pdf("/data/github/pca_network/results/TCGA_DFS/TILs.pdf", width=16, height=6)
ggplot(wide_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "E") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 1.5, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
dev.off()
setwd("/data/github/pca_network")
genes = c("IDO1", "LAG3", "CTLA4", "TNFRSF9", "ICOS", "CD80", "PDCD1LG2", "TIGIT", "CD70", "TNFSF9", "ICOSLG", "KIR3DL1", "CD86", "PDCD1", "LAIR1", "TNFRSF8", "TNFSF15", "TNFRSF14", "IDO2", "CD276", "CD40", "TNFRSF4", "TNFSF14", "HHLA2", "CD244", "CD274", "HAVCR2", "CD27", "BTLA", "LGALS9", "TMIGD2", "CD28", "CD48", "TNFRSF25", "CD40LG", "ADORA2A", "VTCN1", "CD160", "CD44", "TNFSF18", "TNFRSF18", "BTNL2", "CD200R1", "TNFSF4", "CD200", "NRP1", "C10orf54")
genes = c("IDO1", "LAG3", "CTLA4", "TNFRSF9", "ICOS", "CD80", "PDCD1LG2", "TIGIT", "CD70", "TNFSF9", "ICOSLG", "KIR3DL1", "CD86", "PDCD1", "LAIR1", "TNFRSF8", "TNFSF15", "TNFRSF14", "IDO2", "CD276", "CD40", "TNFRSF4", "TNFSF14", "HHLA2", "CD244", "CD274", "HAVCR2", "CD27", "BTLA", "LGALS9", "TMIGD2", "CD28", "CD48", "TNFRSF25", "CD40LG", "ADORA2A", "VTCN1", "CD160", "CD44", "TNFSF18", "TNFRSF18", "BTNL2", "CD200R1", "TNFSF4", "CD200", "NRP1", "C10orf54")
load("/data/github/pca_network/results/TCGA_DFS/model.RData")
# read TCGA-PRAD
x = read.csv("/data/github/pca_network/results/TCGA_mrna_logcpm.txt", header=T, sep="\t")
tcga_df = x
colnames(tcga_df) = gsub("\\.", "-", colnames(tcga_df))
mrna_attributes = read.csv("/data/github/pca_network/results/TCGA_mrna_attributes.txt", header=T, sep="\t")
mrna_attributes = mrna_attributes[which(mrna_attributes$external_gene_name %in% genes),]
tcga_df = merge(tcga_df, mrna_attributes[,c(1,2)], by.x=0, by.y="ensembl_gene_id_version")
tcga_df = tibble::column_to_rownames(tcga_df, "external_gene_name")
tcga_df = tcga_df[,2:ncol(tcga_df)]
tcga_df = tcga_df[, rownames(cox)]
load("/data/github/pca_network/results/TCGA_DFS/model.RData")
genes = c("IDO1", "LAG3", "CTLA4", "TNFRSF9", "ICOS", "CD80", "PDCD1LG2", "TIGIT", "CD70", "TNFSF9", "ICOSLG", "KIR3DL1", "CD86", "PDCD1", "LAIR1", "TNFRSF8", "TNFSF15", "TNFRSF14", "IDO2", "CD276", "CD40", "TNFRSF4", "TNFSF14", "HHLA2", "CD244", "CD274", "HAVCR2", "CD27", "BTLA", "LGALS9", "TMIGD2", "CD28", "CD48", "TNFRSF25", "CD40LG", "ADORA2A", "VTCN1", "CD160", "CD44", "TNFSF18", "TNFRSF18", "BTNL2", "CD200R1", "TNFSF4", "CD200", "NRP1", "C10orf54")
# read TCGA-PRAD
x = read.csv("/data/github/pca_network/results/TCGA_mrna_logcpm.txt", header=T, sep="\t")
tcga_df = x
colnames(tcga_df) = gsub("\\.", "-", colnames(tcga_df))
mrna_attributes = read.csv("/data/github/pca_network/results/TCGA_mrna_attributes.txt", header=T, sep="\t")
mrna_attributes = mrna_attributes[which(mrna_attributes$external_gene_name %in% genes),]
tcga_df = merge(tcga_df, mrna_attributes[,c(1,2)], by.x=0, by.y="ensembl_gene_id_version")
tcga_df = tibble::column_to_rownames(tcga_df, "external_gene_name")
tcga_df = tcga_df[,2:ncol(tcga_df)]
tcga_df = tcga_df[, rownames(cox)]
tcga_df = as.data.frame(t(tcga_df))
tcga_df$category = cox$risk_category
geom_split_violin <- function (mapping = NULL,
data = NULL,
stat = "ydensity",
position = "identity", ...,
draw_quantiles = NULL,
trim = TRUE,
scale = "area",
na.rm = FALSE,
show.legend = NA,
inherit.aes = TRUE) {
layer(data = data,
mapping = mapping,
stat = stat,
geom = GeomSplitViolin,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(trim = trim,
scale = scale,
draw_quantiles = draw_quantiles,
na.rm = na.rm, ...)
)
}
GeomSplitViolin <- ggproto(
"GeomSplitViolin",
GeomViolin,
draw_group = function(self, data, ..., draw_quantiles = NULL) {
data <- transform(data,
xminv = x - violinwidth * (x - xmin),
xmaxv = x + violinwidth * (xmax - x))
grp <- data[1,'group']
newdata <- plyr::arrange(
transform(data, x = if(grp%%2==1) xminv else xmaxv),
if(grp%%2==1) y else -y
)
newdata <- rbind(newdata[1, ], newdata, newdata[nrow(newdata), ], newdata[1, ])
newdata[c(1,nrow(newdata)-1,nrow(newdata)), 'x'] <- round(newdata[1, 'x'])
if (length(draw_quantiles) > 0 & !scales::zero_range(range(data$y))) {
stopifnot(all(draw_quantiles >= 0), all(draw_quantiles <= 1))
quantiles <- ggplot2:::create_quantile_segment_frame(data, draw_quantiles)
aesthetics <- data[rep(1, nrow(quantiles)), setdiff(names(data), c("x", "y")), drop = FALSE]
aesthetics$alpha <- rep(1, nrow(quantiles))
both <- cbind(quantiles, aesthetics)
quantile_grob <- GeomPath$draw_panel(both, ...)
ggplot2:::ggname("geom_split_violin",
grid::grobTree(GeomPolygon$draw_panel(newdata, ...), quantile_grob))
} else {
ggplot2:::ggname("geom_split_violin", GeomPolygon$draw_panel(newdata, ...))
}
}
)
geom_split_violin <- function (mapping = NULL,
data = NULL,
stat = "ydensity",
position = "identity", ...,
draw_quantiles = NULL,
trim = TRUE,
scale = "area",
na.rm = FALSE,
show.legend = NA,
inherit.aes = TRUE) {
layer(data = data,
mapping = mapping,
stat = stat,
geom = GeomSplitViolin,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(trim = trim,
scale = scale,
draw_quantiles = draw_quantiles,
na.rm = na.rm, ...)
)
}
# Reshape the dataframe into a tidy format
tidy_df <- estimate %>%
pivot_longer(cols = colnames(tcga_df[,1:ncol(tcga_df)-1]), names_to = "Variable", values_to = "Score")
View(tcga_df)
colnames(tcga_df[,1:ncol(tcga_df)-1])
# Reshape the dataframe into a tidy format
tidy_df <- tcga_df %>%
pivot_longer(cols = colnames(tcga_df[,1:ncol(tcga_df)-1]), names_to = "Variable", values_to = "Score")
ggplot(tidy_df, aes(x = Variable, y = Score, fill = risk_category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "E") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 4250, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
ggplot(tidy_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "E") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 4250, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
ggplot(tidy_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "E") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 3, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
load("/data/github/pca_network/results/TCGA_DFS/model.RData")
genes = c("IDO1", "LAG3", "CTLA4", "TNFRSF9", "ICOS", "CD80", "PDCD1LG2", "TIGIT", "CD70", "TNFSF9", "ICOSLG", "KIR3DL1", "CD86", "PDCD1", "LAIR1", "TNFRSF8", "TNFSF15", "TNFRSF14", "IDO2", "CD276", "CD40", "TNFRSF4", "TNFSF14", "HHLA2", "CD244", "CD274", "HAVCR2", "CD27", "BTLA", "LGALS9", "TMIGD2", "CD28", "CD48", "TNFRSF25", "CD40LG", "ADORA2A", "VTCN1", "CD160", "CD44", "TNFSF18", "TNFRSF18", "BTNL2", "CD200R1", "TNFSF4", "CD200", "NRP1", "C10orf54")
# read TCGA-PRAD
x = read.csv("/data/github/pca_network/results/TCGA_mrna_logcpm.txt", header=T, sep="\t")
tcga_df = x
colnames(tcga_df) = gsub("\\.", "-", colnames(tcga_df))
mrna_attributes = read.csv("/data/github/pca_network/results/TCGA_mrna_attributes.txt", header=T, sep="\t")
mrna_attributes = mrna_attributes[which(mrna_attributes$external_gene_name %in% genes),]
tcga_df = merge(tcga_df, mrna_attributes[,c(1,2)], by.x=0, by.y="ensembl_gene_id_version")
tcga_df = tibble::column_to_rownames(tcga_df, "external_gene_name")
tcga_df = tcga_df[,2:ncol(tcga_df)]
tcga_df = tcga_df[, rownames(cox)]
tcga_df = t(scale(t(tcga_df), scale = T, center=T))
tcga_df = as.data.frame(t(tcga_df))
tcga_df$category = cox$risk_category
# Reshape the dataframe into a tidy format
tidy_df <- tcga_df %>%
pivot_longer(cols = colnames(tcga_df[,1:ncol(tcga_df)-1]), names_to = "Variable", values_to = "Score")
# Create the violin plot
#pdf("/data/github/pca_network/results/TCGA_DFS/Checkpoints.pdf", width=8, height=6)
ggplot(tidy_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "E") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 3, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
tcga_df = x
colnames(tcga_df) = gsub("\\.", "-", colnames(tcga_df))
mrna_attributes = read.csv("/data/github/pca_network/results/TCGA_mrna_attributes.txt", header=T, sep="\t")
mrna_attributes = mrna_attributes[which(mrna_attributes$external_gene_name %in% genes),]
tcga_df = merge(tcga_df, mrna_attributes[,c(1,2)], by.x=0, by.y="ensembl_gene_id_version")
tcga_df = tibble::column_to_rownames(tcga_df, "external_gene_name")
tcga_df = tcga_df[,2:ncol(tcga_df)]
tcga_df = tcga_df[, rownames(cox)]
tcga_df = as.data.frame(t(tcga_df))
tcga_df$category = cox$risk_category
# Reshape the dataframe into a tidy format
tidy_df <- tcga_df %>%
pivot_longer(cols = colnames(tcga_df[,1:ncol(tcga_df)-1]), names_to = "Variable", values_to = "Score")
# Create the violin plot
#pdf("/data/github/pca_network/results/TCGA_DFS/Checkpoints.pdf", width=8, height=6)
ggplot(tidy_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "E") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 10, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
tcga_df = x
colnames(tcga_df) = gsub("\\.", "-", colnames(tcga_df))
mrna_attributes = read.csv("/data/github/pca_network/results/TCGA_mrna_attributes.txt", header=T, sep="\t")
mrna_attributes = mrna_attributes[which(mrna_attributes$external_gene_name %in% genes),]
tcga_df = merge(tcga_df, mrna_attributes[,c(1,2)], by.x=0, by.y="ensembl_gene_id_version")
tcga_df = tibble::column_to_rownames(tcga_df, "external_gene_name")
tcga_df = tcga_df[,2:ncol(tcga_df)]
tcga_df = tcga_df[, rownames(cox)]
tcga_df = t(scale(t(tcga_df), scale = T, center=F))
tcga_df = as.data.frame(t(tcga_df))
tcga_df$category = cox$risk_category
# Reshape the dataframe into a tidy format
tidy_df <- tcga_df %>%
pivot_longer(cols = colnames(tcga_df[,1:ncol(tcga_df)-1]), names_to = "Variable", values_to = "Score")
# Create the violin plot
#pdf("/data/github/pca_network/results/TCGA_DFS/Checkpoints.pdf", width=8, height=6)
ggplot(tidy_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "E") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 10, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
View(mrna_attributes)
# Create the violin plot
pdf("/data/github/pca_network/results/TCGA_DFS/Checkpoints.pdf", width=16, height=6)
ggplot(tidy_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "E") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 10, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
dev.off()
install.packages("immunedeconv")
install.packages("remotes")
remotes::install_github("omnideconv/immunedeconv")
library(immunedeconv)
library(immunedeconv)
tcga_df = x
colnames(tcga_df) = gsub("\\.", "-", colnames(tcga_df))
mrna_attributes = read.csv("/data/github/pca_network/results/TCGA_mrna_attributes.txt", header=T, sep="\t")
tcga_df = merge(tcga_df, mrna_attributes[,c(1,2)], by.x=0, by.y="ensembl_gene_id_version")
tcga_df = tibble::column_to_rownames(tcga_df, "external_gene_name")
View(tcga_df)
tcga_df = tcga_df %>% filter(external_gene_name != " ")
tcga_df = tcga_df %>% filter(external_gene_name != "")
tcga_df = tibble::column_to_rownames(tcga_df, "external_gene_name")
tcga_df = tcga_df[,2:ncol(tcga_df)]
tcga_df = tcga_df[, rownames(cox)]
res_mcp = as.data.frame(deconvolute(tcga_df, "mcp_counter"))
View(res_mcp)
res_mcp = as.data.frame(t(res_mcp))
res_mcp$category = cox$risk_category
res_mcp = as.data.frame(t(res_mcp))
res_mcp$category = cox$risk_category
res_mcp = as.data.frame(deconvolute(tcga_df, "mcp_counter"))
res_mcp = tibble::column_to_rownames(res_mcp, "cell_type")
res_mcp = as.data.frame(t(res_mcp))
res_mcp$category = cox$risk_category
tidy_df <- tcga_df %>%
pivot_longer(cols = colnames(res_mcp[,1:ncol(res_mcp)-1]), names_to = "Variable", values_to = "Score")
tidy_df <- tidy_df %>%
pivot_longer(cols = colnames(res_mcp[,1:ncol(res_mcp)-1]), names_to = "Variable", values_to = "Score")
View(tidy_df)
colnames(tidy_df)
colnames(res_mcp)
tidy_df <- res_mcp %>%
pivot_longer(cols = colnames(res_mcp[,1:ncol(res_mcp)-1]), names_to = "Variable", values_to = "Score")
# Create the violin plot
#pdf("/data/github/pca_network/results/TCGA_DFS/MCPcounter.pdf", width=, height=6)
ggplot(tidy_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "E") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 10, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
ggplot(tidy_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "E") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 15, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
pdf("/data/github/pca_network/results/TCGA_DFS/MCPcounter.pdf", width=10, height=6)
ggplot(tidy_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "E") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 15, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
dev.off()
tcga_df = x
colnames(tcga_df) = gsub("\\.", "-", colnames(tcga_df))
mrna_attributes = read.csv("/data/github/pca_network/results/TCGA_mrna_attributes.txt", header=T, sep="\t")
tcga_df = merge(tcga_df, mrna_attributes[,c(1,2)], by.x=0, by.y="ensembl_gene_id_version")
tcga_df = tcga_df %>% filter(external_gene_name != "")
tcga_df = tibble::column_to_rownames(tcga_df, "external_gene_name")
tcga_df = tcga_df[,2:ncol(tcga_df)]
tcga_df = tcga_df[, rownames(cox)]
tcga_df = exp2(tcga_df)
tcga_df = 2^(tcga_df)
res_mcp = as.data.frame(deconvolute(tcga_df, "mcp_counter", tumor = TRUE))
res_mcp = tibble::column_to_rownames(res_mcp, "cell_type")
res_mcp = as.data.frame(t(res_mcp))
res_mcp$category = cox$risk_category
tidy_df <- res_mcp %>%
pivot_longer(cols = colnames(res_mcp[,1:ncol(res_mcp)-1]), names_to = "Variable", values_to = "Score")
ggplot(tidy_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "E") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 15, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
res_mcp = res_mcp[which(colnames(res_mcp) != "Cancer associated fibroblast"),]
tcga_df = 2^(tcga_df)
res_mcp = as.data.frame(deconvolute(tcga_df, "mcp_counter", tumor = TRUE))
res_mcp = tibble::column_to_rownames(res_mcp, "cell_type")
res_mcp = as.data.frame(t(res_mcp))
res_mcp$category = cox$risk_category
res_mcp = res_mcp[,which(colnames(res_mcp) != "Cancer associated fibroblast")]
tidy_df <- res_mcp %>%
pivot_longer(cols = colnames(res_mcp[,1:ncol(res_mcp)-1]), names_to = "Variable", values_to = "Score")
ggplot(tidy_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "E") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 15, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
tcga_df = x
colnames(tcga_df) = gsub("\\.", "-", colnames(tcga_df))
mrna_attributes = read.csv("/data/github/pca_network/results/TCGA_mrna_attributes.txt", header=T, sep="\t")
tcga_df = merge(tcga_df, mrna_attributes[,c(1,2)], by.x=0, by.y="ensembl_gene_id_version")
tcga_df = tcga_df %>% filter(external_gene_name != "")
tcga_df = tibble::column_to_rownames(tcga_df, "external_gene_name")
tcga_df = tcga_df[,2:ncol(tcga_df)]
tcga_df = tcga_df[, rownames(cox)]
tcga_df = 2^(tcga_df)
res_mcp = as.data.frame(deconvolute(tcga_df, "mcp_counter", tumor = TRUE))
res_mcp = tibble::column_to_rownames(res_mcp, "cell_type")
res_mcp = as.data.frame(t(res_mcp))
res_mcp$category = cox$risk_category
res_mcp = res_mcp[,which(colnames(res_mcp) != "Cancer associated fibroblast")]
tidy_df <- res_mcp %>%
pivot_longer(cols = colnames(res_mcp[,1:ncol(res_mcp)-1]), names_to = "Variable", values_to = "Score")
# Create the violin plot
#pdf("/data/github/pca_network/results/TCGA_DFS/MCPcounter.pdf", width=10, height=6)
ggplot(tidy_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "E") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 15, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
tcga_df = x
colnames(tcga_df) = gsub("\\.", "-", colnames(tcga_df))
mrna_attributes = read.csv("/data/github/pca_network/results/TCGA_mrna_attributes.txt", header=T, sep="\t")
tcga_df = merge(tcga_df, mrna_attributes[,c(1,2)], by.x=0, by.y="ensembl_gene_id_version")
tcga_df = tcga_df %>% filter(external_gene_name != "")
tcga_df = tibble::column_to_rownames(tcga_df, "external_gene_name")
tcga_df = tcga_df[,2:ncol(tcga_df)]
tcga_df = tcga_df[, rownames(cox)]
tcga_df = 2^(tcga_df)
tcga_df = as.data.frame(t(scale(t(tcga_df), scale = T, center = T)))
res_mcp = as.data.frame(deconvolute(tcga_df, "mcp_counter", tumor = TRUE))
res_mcp = tibble::column_to_rownames(res_mcp, "cell_type")
res_mcp = as.data.frame(t(res_mcp))
res_mcp$category = cox$risk_category
res_mcp = res_mcp[,which(colnames(res_mcp) != "Cancer associated fibroblast")]
tidy_df <- res_mcp %>%
pivot_longer(cols = colnames(res_mcp[,1:ncol(res_mcp)-1]), names_to = "Variable", values_to = "Score")
# Create the violin plot
#pdf("/data/github/pca_network/results/TCGA_DFS/MCPcounter.pdf", width=10, height=6)
ggplot(tidy_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "E") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 15, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
tcga_df = x
colnames(tcga_df) = gsub("\\.", "-", colnames(tcga_df))
mrna_attributes = read.csv("/data/github/pca_network/results/TCGA_mrna_attributes.txt", header=T, sep="\t")
tcga_df = merge(tcga_df, mrna_attributes[,c(1,2)], by.x=0, by.y="ensembl_gene_id_version")
tcga_df = tcga_df %>% filter(external_gene_name != "")
tcga_df = tibble::column_to_rownames(tcga_df, "external_gene_name")
tcga_df = tcga_df[,2:ncol(tcga_df)]
tcga_df = tcga_df[, rownames(cox)]
tcga_df = 2^(tcga_df)
tcga_df = as.data.frame(t(scale(t(tcga_df), scale = T, center = T)))
res_mcp = as.data.frame(deconvolute(tcga_df, "mcp_counter", tumor = TRUE))
res_mcp = tibble::column_to_rownames(res_mcp, "cell_type")
res_mcp = as.data.frame(t(res_mcp))
res_mcp$category = cox$risk_category
#res_mcp = res_mcp[,which(colnames(res_mcp) != "Cancer associated fibroblast")]
tidy_df <- res_mcp %>%
pivot_longer(cols = colnames(res_mcp[,1:ncol(res_mcp)-1]), names_to = "Variable", values_to = "Score")
# Create the violin plot
#pdf("/data/github/pca_network/results/TCGA_DFS/MCPcounter.pdf", width=10, height=6)
ggplot(tidy_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "E") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 15, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
#dev.off()
