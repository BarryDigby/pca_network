position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 1.5, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
dev.off()
load("/data/github/pca_network/results/TCGA_DFS/model.RData")
source("https://raw.githubusercontent.com/BarryDigby/pca_network/main/data/geom_violin.R")
genes = c("IDO1", "LAG3", "CTLA4", "TNFRSF9", "ICOS", "CD80", "PDCD1LG2", "TIGIT", "CD70", "TNFSF9", "ICOSLG", "KIR3DL1", "CD86", "PDCD1", "LAIR1", "TNFRSF8", "TNFSF15", "TNFRSF14", "IDO2", "CD276", "CD40", "TNFRSF4", "TNFSF14", "HHLA2", "CD244", "CD274", "HAVCR2", "CD27", "BTLA", "LGALS9", "TMIGD2", "CD28", "CD48", "TNFRSF25", "CD40LG", "ADORA2A", "VTCN1", "CD160", "CD44", "TNFSF18", "TNFRSF18", "BTNL2", "CD200R1", "TNFSF4", "CD200", "NRP1", "C10orf54")
# read TCGA-PRAD
#x = read.csv("/data/github/pca_network/results/TCGA_mrna_logcpm.txt", header=T, sep="\t")
tcga_df = x
colnames(tcga_df) = gsub("\\.", "-", colnames(tcga_df))
mrna_attributes = read.csv("/data/github/pca_network/results/TCGA_mrna_attributes.txt", header=T, sep="\t")
mrna_attributes = mrna_attributes[which(mrna_attributes$external_gene_name %in% genes),]
tcga_df = merge(tcga_df, mrna_attributes[,c(1,2)], by.x=0, by.y="ensembl_gene_id_version")
tcga_df = tibble::column_to_rownames(tcga_df, "external_gene_name")
tcga_df = tcga_df[,2:ncol(tcga_df)]
tcga_df = tcga_df[, rownames(cox)]
tcga_df = t(scale(t(tcga_df), scale = T, center=T))
tcga_df = as.data.frame(t(tcga_df))
tcga_df$category = cox$risk_category
# Reshape the dataframe into a tidy format
tidy_df <- tcga_df %>%
pivot_longer(cols = colnames(tcga_df[,1:ncol(tcga_df)-1]), names_to = "Variable", values_to = "Score")
# Create the violin plot
#pdf("/data/github/pca_network/results/TCGA_DFS/Checkpoints.pdf", width=18, height=6)
ggplot(tidy_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "D") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 6, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
# remove ns for plot
tidy_df = tidy_df %>% filter(!Variable %in% c("ADORA2A", "CD160", "CD200", "CD274", "TNFSF15", "TNFSF4", "TNFSF9"))
# Create the violin plot
#pdf("/data/github/pca_network/results/TCGA_DFS/Checkpoints.pdf", width=18, height=6)
ggplot(tidy_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "D") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 6, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
pdf("/data/github/pca_network/results/TCGA_DFS/Checkpoints.pdf", width=2, height=6)
ggplot(tidy_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "D") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 6, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
dev.off()
pdf("/data/github/pca_network/results/TCGA_DFS/Checkpoints.pdf", width=12, height=6)
ggplot(tidy_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "D") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 6, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
dev.off()
library(immunedeconv)
tcga_df = x
colnames(tcga_df) = gsub("\\.", "-", colnames(tcga_df))
mrna_attributes = read.csv("/data/github/pca_network/results/TCGA_mrna_attributes.txt", header=T, sep="\t")
tcga_df = merge(tcga_df, mrna_attributes[,c(1,2)], by.x=0, by.y="ensembl_gene_id_version")
tcga_df = tcga_df %>% filter(external_gene_name != "")
tcga_df = tibble::column_to_rownames(tcga_df, "external_gene_name")
tcga_df = tcga_df[,2:ncol(tcga_df)]
tcga_df = tcga_df[, rownames(cox)]
#tcga_df = 2^(tcga_df)
tcga_df = as.data.frame(t(scale(t(tcga_df), scale = T, center = T)))
res_mcp = as.data.frame(deconvolute(tcga_df, "mcp_counter", tumor = TRUE))
res_mcp = tibble::column_to_rownames(res_mcp, "cell_type")
res_mcp = as.data.frame(t(res_mcp))
res_mcp$category = cox$risk_category
#res_mcp = res_mcp[,which(colnames(res_mcp) != "Cancer associated fibroblast")]
tidy_df <- res_mcp %>%
pivot_longer(cols = colnames(res_mcp[,1:ncol(res_mcp)-1]), names_to = "Variable", values_to = "Score")
# Create the violin plot
#pdf("/data/github/pca_network/results/TCGA_DFS/MCPcounter.pdf", width=10, height=6)
ggplot(tidy_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "D") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 5, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
tidy_df = tidy_df %>% filter(!Variable %in% c("Neutrophil", "T cell CD8+"))
# Create the violin plot
#pdf("/data/github/pca_network/results/TCGA_DFS/MCPcounter.pdf", width=10, height=6)
ggplot(tidy_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "D") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 5, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
# Create the violin plot
pdf("/data/github/pca_network/results/TCGA_DFS/MCPcounter.pdf", width=8, height=6)
ggplot(tidy_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "D") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 5, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
dev.off()
setwd("/data/github/pca_network/")
LNCAP_clone1 = read.csv("/data/github/pca_network/mrna/LNCaP/clone1_control.txt", sep="\t", header=T)
head(LNCAP_clone1)
TCGA = read.csv("/data/github/pca_network/mrna/TCGA/tumor_vs_normal.txt", sep="\t", header=T)
Reduce(intersect, list=(LNCAP_clone1$Gene, TCGA$Gene))
Reduce(intersect, list=c(LNCAP_clone1$Gene, TCGA$Gene))
Reduce(intersect, list(LNCAP_clone1$Gene, TCGA$Gene))
# rearrange DFs for merge: gene + basic limma info.
LNCAP_clone1$experiment = "LNCaP_clone1"
TCGA$experiment = "TCGA"
intersection = rbind(LNCAP_clone1, TCGA)
intersection = intersection %>% group_by(Gene) %>% filter(all(logFC>0) | all(logFC<0)) %>% ungroup()
#!/usr/bin/env Rscript
library(dplyr)
intersection = intersection %>% group_by(Gene) %>% filter(all(logFC>0) | all(logFC<0)) %>% ungroup()
View(intersection)
intersection = rbind(TCGA, LNCAP_clone1)
intersection = intersection %>% group_by(Gene) %>% filter(length(unique(experiment))>=2) %>% ungroup()
intersection = intersection %>% group_by(Gene) %>% filter(all(logFC>0) | all(logFC<0)) %>% ungroup()
View(intersection)
intersection = intersection %>% group_by(Gene) %>% summarise(average_LFC = mean(logFC))
View(intersection)
datasets_to_intersect = c("TCGA", "LNCAP_clone1")
intersect = rbind(datasets_to_intersect)
intersect = rbind(get(datasets_to_intersect))
intersect = rbind(eval(datasets_to_intersect))
View(intersection)
install.packages("GSA")
library(GSA)
gmt_files = list.files("~/Downloads/", "*.gmt")
x = GSA::GSA.read.gmt(gmt_files[1])
x = GSA::GSA.read.gmt("~/Downloads/GOBP_ANDROGEN_BIOSYNTHETIC_PROCESS.v2023.1.Hs.gmt")
x = GSA::GSA.read.gmt("~/Downloads/NELSON_RESPONSE_TO_ANDROGEN_DN.v2023.1.Hs.gmt")
hallmarks = msigdbr(species = "human", category = "H")
library(msigdbr)
hallmarks = msigdbr(species = "human", category = "H")
View(hallmarks)
hallmarks = dplyr::filter(hallmarks, grepl('ANDROGEN', Term_Description))
View(hallmarks)
hallmarks = dplyr::filter(hallmarks, grepl('ANDROGEN', gs_name))
View(hallmarks)
go = msigdbr(species = "human", category = "GO")
go = msigdbr(species = "human", category = "C5")
go = dplyr::filter(go, grepl("ANDROGEN"), gs_name)
go = dplyr::filter(go, grepl("ANDROGEN", gs_name))
View(go)
curated = msigdbr(species = "human", category = "C2")
curated = dplyr::filter(curated, grepl("NELSON", gs_name))
View(curated)
master = rbind(hallmarks, go, curated)
my_sets = split(
master$gene_symbol,
master$gs_name
)
# read TCGA-PRAD
x = read.csv("/data/github/pca_network/results/TCGA_mrna_logcpm.txt", header=T, sep="\t")
length(unique(master$gene_symbol))
tcga_df = x
colnames(tcga_df) = gsub("\\.", "-", colnames(tcga_df))
mrna_attributes = read.csv("/data/github/pca_network/results/TCGA_mrna_attributes.txt", header=T, sep="\t")
mrna_attributes = mrna_attributes[which(mrna_attributes$external_gene_name %in% master$gene_symbol),]
tcga_df = merge(tcga_df, mrna_attributes[,c(1,2)], by.x=0, by.y="ensembl_gene_id_version")
tcga_df = tibble::column_to_rownames(tcga_df, "external_gene_name")
tcga_df = tcga_df[,2:ncol(tcga_df)]
tcga_df = tcga_df[, rownames(cox)]
tcga_mat = as.matrix(tcga_df)
# read TCGA-PRAD
load("/data/github/pca_network/results/TCGA_DFS/model.RData")
tcga_df = tcga_df[, rownames(cox)]
tcga_mat = as.matrix(tcga_df)
var = GSVA::gsva(tcga_mat, my_sets, method = "gsva", kcdf = "Gaussian",  min.sz = 5, max.sz = 500, mx.diff = TRUE, verbose = FALSE)
order_cols = data.frame(id = rownames(cox),
risk = cox$risk_category)
order_cols$risk = sort(order_cols$risk, decreasing = TRUE)
ann_col = data.frame(row.names = order_cols$id,
Risk_strata = order_cols$risk)
col <- c("red2", "royalblue")
names(col) <- c("High risk", "Low risk")
ann_clr <- list(Risk_strata = col)
mat = t(scale(t(var), scale = T, center = T))
pheatmap(mat,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_colnames = FALSE,
scale = "none",
annotation_col=ann_col,
annotation_colors = ann_clr,
color = hcl.colors(100, "RdBu",rev=T))
library(phetmap)
library(pheatmap)
pheatmap(mat,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_colnames = FALSE,
scale = "none",
annotation_col=ann_col,
annotation_colors = ann_clr,
color = hcl.colors(100, "RdBu",rev=T))
var = GSVA::gsva(tcga_mat, my_sets, method = "gsva", kcdf = "Gaussian",  min.sz = 5, max.sz = 500, mx.diff = TRUE, verbose = FALSE)
pheatmap(var,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_colnames = FALSE,
scale = "none",
annotation_col=ann_col,
annotation_colors = ann_clr,
color = hcl.colors(100, "RdBu",rev=T))
pheatmap(var,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_colnames = FALSE,
scale = "column",
annotation_col=ann_col,
annotation_colors = ann_clr,
color = hcl.colors(100, "RdBu",rev=T))
pheatmap(var,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_colnames = FALSE,
scale = "row",
annotation_col=ann_col,
annotation_colors = ann_clr,
color = hcl.colors(100, "RdBu",rev=T))
pheatmap(var,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_colnames = FALSE,
scale = "none",
annotation_col=ann_col,
annotation_colors = ann_clr,
color = hcl.colors(100, "RdBu",rev=T))
pheatmap(var,
cluster_rows = T,
cluster_cols = T,
show_colnames = FALSE,
scale = "none",
annotation_col=ann_col,
annotation_colors = ann_clr,
color = hcl.colors(100, "RdBu",rev=T))
FALSE
pheatmap(var,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_colnames = FALSE,
scale = "none",
annotation_col=ann_col,
annotation_colors = ann_clr,
color = hcl.colors(100, "RdBu",rev=T))
gsva = var
gsva = as.data.frame(t(gsva))
gsva$category = order_cols$risk
wide_df = gsva %>%
pivot_longer(cols = colnames(gsva[1:ncol(gsva)-1]), names_to = "Variable", values_to = "Score")
library(dplyr)
library(tidyr)
wide_df = gsva %>%
pivot_longer(cols = colnames(gsva[1:ncol(gsva)-1]), names_to = "Variable", values_to = "Score")
# remove those that are not significant
wide_df = wide_df %>% filter(!Variable %in% c("Activated B cell", "Activated CD4 T cell", "Activated dendritic cell", "CD56bright natural killer cell",
"Immature  B cell", "Monocyte", "Neutrophil", "Plasmacytoid dendritic cell", "T follicular helper cell", "Type 17 T helper cell"))
ggplot(wide_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "D") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 1.5, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
library(ggplot2)
ggplot(wide_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "D") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 1.5, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
source("https://raw.githubusercontent.com/BarryDigby/pca_network/main/data/geom_violin.R")
ggplot(wide_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "D") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 1.5, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
library(ggpubr)
ggplot(wide_df, aes(x = Variable, y = Score, fill = category))+
geom_split_violin(trim = FALSE, alpha = .4)+
geom_boxplot(width = .2, alpha = .6,
position = position_dodge(.25))+
scale_fill_viridis_d(option = "D") +
stat_summary(fun = "mean", geom = "point",
position = position_dodge(width = 0.25)) +
stat_summary(fun.data = "mean_se", geom = "errorbar", width = .1,
position = position_dodge(width = 0.25)) + theme_bw() +
stat_compare_means(method = "t.test", label.y = 1.5, aes(label = after_stat(p.signif)))+
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1, size = 10, face = "bold"))
kegg = msigdbr(species = "human", category = "C2", subcategory = "KEGG")
View(kegg)
my_sets = split(
kegg$gene_symbol,
kegg$gs_name
)
tcga_df = x
colnames(tcga_df) = gsub("\\.", "-", colnames(tcga_df))
mrna_attributes = read.csv("/data/github/pca_network/results/TCGA_mrna_attributes.txt", header=T, sep="\t")
mrna_attributes = mrna_attributes[which(mrna_attributes$external_gene_name %in% master$gene_symbol),]
tcga_df = merge(tcga_df, mrna_attributes[,c(1,2)], by.x=0, by.y="ensembl_gene_id_version")
tcga_df = tibble::column_to_rownames(tcga_df, "external_gene_name")
tcga_df = tcga_df[,2:ncol(tcga_df)]
tcga_df = tcga_df[, rownames(cox)]
tcga_mat = as.matrix(tcga_df)
var = GSVA::gsva(tcga_mat, my_sets, method = "gsva", kcdf = "Gaussian",  min.sz = 5, max.sz = 500, mx.diff = TRUE, verbose = FALSE)
View(var)
var = as.data.frame(t(var))
var$prognostic_index = cox$risk_score
i1 <- sapply(var, is.numeric)
y1 <- "prognostic_index" #change it to actual column name
x1 <- setdiff(names(var)[i1], y1)
plot(cor(var[x1], var[[y1]]))
corr = cor(var[x1], var[[y1]])
View(corr)
View(kegg)
corr = cor(var, method = "pearson")
order_cols = data.frame(id = rownames(cox),
risk = cox$risk_category)
order_cols$risk = sort(order_cols$risk, decreasing = TRUE)
ann_col = data.frame(row.names = order_cols$id,
Risk_strata = order_cols$risk)
col <- c("red2", "royalblue")
names(col) <- c("High risk", "Low risk")
ann_clr <- list(Risk_strata = col)
pheatmap(var,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_colnames = FALSE,
scale = "none",
annotation_col=ann_col,
annotation_colors = ann_clr,
color = hcl.colors(100, "RdBu",rev=T))
pheatmap(corr,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_colnames = FALSE,
scale = "none",
annotation_col=ann_col,
annotation_colors = ann_clr,
color = hcl.colors(100, "RdBu",rev=T))
corr = cor(var, method = "pearson")
pheatmap(corr,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_colnames = FALSE,
scale = "none",
annotation_col=ann_col,
annotation_colors = ann_clr,
color = hcl.colors(100, "RdBu",rev=T))
View(corr)
hist(corr[,25])
var = GSVA::gsva(tcga_mat, my_sets, method = "gsva", kcdf = "Gaussian",  min.sz = 5, max.sz = 500, mx.diff = TRUE, verbose = FALSE)
var = as.data.frame(t(var))
var$prognostic_index = cox$risk_score
order_cols = data.frame(id = rownames(cox),
risk = cox$risk_category)
order_cols$risk = sort(order_cols$risk, decreasing = TRUE)
ann_col = data.frame(row.names = order_cols$id,
Risk_strata = order_cols$risk)
col <- c("red2", "royalblue")
names(col) <- c("High risk", "Low risk")
ann_clr <- list(Risk_strata = col)
pheatmap(var,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_colnames = FALSE,
scale = "none",
annotation_col=ann_col,
annotation_colors = ann_clr,
color = hcl.colors(100, "RdBu",rev=T))
View(var)
var = GSVA::gsva(tcga_mat, my_sets, method = "gsva", kcdf = "Gaussian",  min.sz = 5, max.sz = 500, mx.diff = TRUE, verbose = FALSE)
order_cols = data.frame(id = rownames(cox),
risk = cox$risk_category)
order_cols$risk = sort(order_cols$risk, decreasing = TRUE)
ann_col = data.frame(row.names = order_cols$id,
Risk_strata = order_cols$risk)
col <- c("red2", "royalblue")
names(col) <- c("High risk", "Low risk")
ann_clr <- list(Risk_strata = col)
pheatmap(var,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_colnames = FALSE,
scale = "none",
annotation_col=ann_col,
annotation_colors = ann_clr,
color = hcl.colors(100, "RdBu",rev=T))
var = as.data.frame(t(scale(t(var), center = T, scale = T)))
pheatmap(var,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_colnames = FALSE,
scale = "none",
annotation_col=ann_col,
annotation_colors = ann_clr,
color = hcl.colors(100, "RdBu",rev=T))
var = GSVA::gsva(tcga_mat, my_sets, method = "gsva", kcdf = "Gaussian",  min.sz = 5, max.sz = 500, mx.diff = TRUE, verbose = FALSE)
pheatmap(var,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_colnames = FALSE,
scale = "none",
annotation_col=ann_col,
annotation_colors = ann_clr,
color = hcl.colors(100, "RdBu",rev=T))
pheatmap(var,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_colnames = FALSE,
scale = "column",
annotation_col=ann_col,
annotation_colors = ann_clr,
color = hcl.colors(100, "RdBu",rev=T))
pheatmap(var,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_colnames = FALSE,
scale = "row",
annotation_col=ann_col,
annotation_colors = ann_clr,
color = hcl.colors(100, "RdBu",rev=T))
pheatmap(var,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_colnames = FALSE,
scale = "none",
annotation_col=ann_col,
annotation_colors = ann_clr,
color = hcl.colors(100, "RdBu",rev=T))
pheatmap(var,
cluster_rows = TRUE,
cluster_cols = FALSE,
show_colnames = FALSE,
scale = "none",
annotation_col=ann_col,
annotation_colors = ann_clr,
color = hcl.colors(100, "RdBu",rev=T))
length(unique(kegg$gs_name))
var = GSVA::gsva(tcga_mat, my_sets, method = "gsva", kcdf = "Gaussian",  min.sz = 1, max.sz = 1000, mx.diff = TRUE, verbose = FALSE)
pheatmap(var,
cluster_rows = TRUE,
cluster_cols = FALSE,
show_colnames = FALSE,
scale = "none",
annotation_col=ann_col,
annotation_colors = ann_clr,
color = hcl.colors(100, "RdBu",rev=T))
pheatmap(var,
cluster_rows = TRUE,
cluster_cols = TRUE,
show_colnames = FALSE,
scale = "none",
annotation_col=ann_col,
annotation_colors = ann_clr,
color = hcl.colors(100, "RdBu",rev=T))
View(var)
16*13
