grch37 = grch37_19
# third instance - private to hg38
} else if ( is.na( grch37_19) & !is.na(grch37_lift)){
grch37 = grch37_lift
}
vec1 = c(vec1, grch38)
vec2 = c(vec2, grch37)
}
library(dplyr)
hg19 = read.table("/data/github/pycircdb/ANNOTATIONS/hg19_plus_lift.txt", header=T, sep="\t")
hg38 = read.table("/data/github/pycircdb/ANNOTATIONS/hg38_plus_lift.txt", header=T, sep="\t")
hg19 = hg19 %>% rename("circAtlas_19" = "circAtlas_ID", "circBase_type" = "circRNA_type", "HGNC_19" = "HGNC")
hg38 = hg38 %>% rename("circAtlas_38" = "circAtlas_ID", "CSCD_type" = "circRNA_type", "HGNC_38" = "HGNC")
master = merge(hg38, hg19, by.x = "hg38", by.y="hg38", all=TRUE)
install.packages("hiveR")
install.packages("HiveR")
vignette("HiveR")
### 2D Hive Plots
require("grid")
# Generate some random data
test2 <- ranHiveData(nx = 2)
require("HiveR")
### 2D Hive Plots
require("grid")
require("HiveR")
# Generate some random data
test2 <- ranHiveData(nx = 2)
test3 <- ranHiveData(nx = 3)
# First the nx = 2 case.
# Note that gpar contains parameters that apply to both the
# axis labels and arrow. A 6th value in arrow offsets the arrow vertically:
plotHive(test2,
ch = 5, axLabs = c("axis 1", "axis 2"), rot = c(-90, 90),
axLab.pos = c(20, 20), axLab.gpar = gpar(col = "pink", fontsize = 14, lwd = 2),
arrow = c("radius units", 0, 20, 60, 25, 40)
)
# Now nx = 3:
plotHive(test3) # default plot
test3
# Call up a built-in data set to illustrate some plotting tricks
data(HEC)
require("grid") # for text additions outside of HiveR (grid.text)
plotHive(HEC,
ch = 0.1, bkgnd = "white",
axLabs = c("hair\ncolor", "eye\ncolor"),
axLab.pos = c(1, 1),
axLab.gpar = gpar(fontsize = 14)
)
plotHive(HEC,
ch = 0.1, bkgnd = "white",
axLabs = c("hair\ncolor", "eye\ncolor"),
axLab.pos = c(1, 1),
axLab.gpar = gpar(fontsize = 14)
)
grid.text("males", x = 0, y = 2.3, default.units = "native")
grid.text("females", x = 0, y = -2.3, default.units = "native")
grid.text("Pairing of Eye Color with Hair Color",
x = 0, y = 4,
default.units = "native", gp = gpar(fontsize = 18)
)
library(multiMiR)
vignette("multiMiR")
multiMiR::get_multimir(mirna="hsa-miR-106a-5p")
x = multiMiR::get_multimir(mirna="hsa-miR-106a-5p")
x@summary
x@data$database
x_dat = x@data
View(x_dat)
validated = multiMiR::get_multimir(mirna="hsa-miR-106a-5p")$data
validated = multiMiR::get_multimir(mirna="hsa-miR-106a-5p")
predicted = multiMiR::get_multimir(mirna="hsa-miR-106a-5p", table = "predicted")
pred_tab = predicted@data
View(pred_tab)
unique(pred_tab$database)
length(pred_tab$database == "targetscan")
View(x_dat)
View(pred_tab)
validated = multiMiR::get_multimir(mirna="hsa-06a-5p")
val_dat = validated@data
x_dat$experiment[x_dat$experiment==""] <- "NA"
unique(x_dat$type)
unique(x_dat$support_type)
nrow(val_dat)
foo = merge(x_dat, pred_tab, by="mature_mirna_id")
library(multiMiR)
mirna = "hsa-miR-106a-5p"
# subset columns
val_col = c("database", "mature_mirna_id", "target_symbol", "experiment", "support_type")
pred_col = c("database", "mature_mirna_id", "target_symbol")
# run multiMiR
validated = get_multiMir(mirna, table="validated")
library(multiMiR)
mirna = "hsa-miR-106a-5p"
# subset columns
val_col = c("database", "mature_mirna_id", "target_symbol", "experiment", "support_type")
pred_col = c("database", "mature_mirna_id", "target_symbol")
# run multiMiR
validated = get_multiMir(mirna, table="validated")
library(multiMiR)
mirna = "hsa-miR-106a-5p"
# subset columns
val_col = c("database", "mature_mirna_id", "target_symbol", "experiment", "support_type")
pred_col = c("database", "mature_mirna_id", "target_symbol")
# run multiMiR
validated = get_multimir(mirna, table="validated")
validated = validated@data
# run multiMiR
validated = get_multimir(mirna = mirna, table="validated")
validated = validated@data
# if dataframe is empty, skip steps
if (nrow(validated) == 0){
validated = data.frame(matrix(ncol = 5, nrow = 0))
colnames(validated) = val_col
} else {
validated = as.data.frame(validated[, val_col])
validated$experiment[validated$experiment == ""] <- "NA"
validated$support_type[validated$support_type == ""] <- "NA"
# remove duplicate lines
validated = validated[!duplicated(validated),]
}
View(validated)
library(multiMiR)
mirna = "hsa-miR-106a-5p"
# subset columns
val_col = c("database", "mature_mirna_id", "target_symbol", "experiment", "support_type")
pred_col = c("database", "mature_mirna_id", "target_symbol")
# run multiMiR
validated = get_multimir(mirna = mirna, table="validated")
validated = validated@data
# if dataframe is empty, skip steps
if (nrow(validated) == 0){
validated = data.frame(matrix(ncol = 5, nrow = 0))
colnames(validated) = val_col
} else {
validated = as.data.frame(validated[, val_col])
validated = validated[validated$target_symbol != "",]
validated$experiment[validated$experiment == ""] <- "NA"
validated$support_type[validated$support_type == ""] <- "NA"
# remove duplicate lines
validated = validated[!duplicated(validated),]
}
predicted = get_multimir(mirna = mirna, table="predicted")
predicted = predicted@data
if(nrow(predicted) == 0){
predicted = data.frame(matrix(ncol = 3, nrow = 0))
colnames(predicted) = pred_col
} else {
predicted = as.data.frame(predicted[, pred_col])
# remove empty target_symbol lines
predicted = predicted[predicted$target_symbol != "",]
}
View(predicted)
predicted = predicted[!duplicated(predicted),]
library(tidyverse)
all = merge(predicted, validated, by="mature_mirna_id")
View(all)
unique(validated$database)
unique(predicted$database)
library(tidyr)
library(dplyr)
library(survival)
library(RegParallel)
library(survminer)
library(timeROC)
library(ggplot2)
library(glmnet)
library(mfp)
library(boot)
#########################################################################
# load ceRNA network genes
#########################################################################
network = read.csv("/data/github/pca_network/results/circ_mirna_mrna_network.txt", header=T, sep="\t")
genes = unique(network$mrna)
#########################################################################
# load TCGA metadata from Protein Atlas.
# Supplement additional metadata from other sources
##########################################################################
atlas_meta = read.csv("/data/github/pca_network/data/tcga_updated_meta.csv", header=T, sep=",")
rownames(atlas_meta) = atlas_meta$sample
# merge BCR status using PCa DB dataset
pca_db = readRDS("/data/github/pca_network/data/TCGA-PRAD_eSet.RDS")
pca_db = pca_db@phenoData@data
pca_db = pca_db[,c(1,27)]
pca_db$sample_id = paste(pca_db$sample_id, "A", sep="")
table(atlas_meta$Row.names %in% pca_db$sample_id)
# 478 matching PCa DB <-> atlas meta. this is better than 464 valid TCGA eset time to event.
atlas_meta = merge(atlas_meta, pca_db, by.x="Row.names", by.y="sample_id")
keep = atlas_meta$sample_type=="Primary Tumor"
atlas_meta = atlas_meta[keep,]
# add Resectional status
# R0 no residual, R1 micro, R2 macro, RX uncertain.
resec = read.csv("/data/github/pca_network/data/prad_tcga_clinical_data.tsv", header=T, sep="\t")
resec$Sample.ID = paste(resec$Sample.ID, "A", sep="")
table(resec$Sample.ID %in% atlas_meta$sample)
atlas_meta = merge(atlas_meta, subset(resec, select=c(Sample.ID, Surgical.Margin.Resection.Status)), by.x="sample", by.y="Sample.ID")
atlas_meta$years_to_follow_up <- as.character(floor(atlas_meta$years_to_follow_up))
#########################################################################
# Use logcpm STAR counts for CoxPH/Kaplan Meier
#########################################################################
logcpm = read.csv("/data/github/pca_network/results/TCGA_mrna_logcpm.txt", header=T, row.names = 1, sep="\t")
colnames(logcpm) = gsub("\\.", "-", colnames(logcpm))
mrna_attributes = read.csv("/data/github/pca_network/results/TCGA_mrna_attributes.txt", header=T, sep="\t")
mrna_attributes = mrna_attributes[which(mrna_attributes$external_gene_name %in% genes),]
logcpm = merge(logcpm, mrna_attributes[,1:2], by.x=0, by.y="ensembl_gene_id_version")
logcpm = tibble::column_to_rownames(logcpm, "external_gene_name")
logcpm = logcpm[,c(2:ncol(logcpm))]
logcpm = logcpm[,atlas_meta$Row.names]
#########################################################################
# Univariate Cox proportional hazards regression:
# Find ceRNA mRNAs * with prognosis of PCa (disease free survival)
#########################################################################
univ_mat = as.data.frame(t(scale(t(logcpm), scale = T, center = T)))
univ_mat = as.data.frame(t(univ_mat))
univ_mat = cbind(univ_mat, atlas_meta[,c("days_to_follow_up", "bcr_status")])
res <- RegParallel(
data = univ_mat,
formula = 'Surv(days_to_follow_up, bcr_status) ~ [*]',
FUN = function(formula, data)
coxph(formula = formula,
data = data,
ties = 'breslow',
singular.ok = TRUE),
FUNtype = 'coxph',
variables = colnames(univ_mat)[1:256],
blocksize = 50,
p.adjust = "BH",
cores = 2,
nestedParallel = FALSE,
conflevel = 95)
res <- res[!is.na(res$P),]
res = res[which(res$P.adjust <= 0.05),]
genes = res$Variable
##########################################################################
# Schoenfelds test - remove genes that violate Coxph assumptions
##########################################################################
univ_mat = univ_mat[,c(genes, "days_to_follow_up", "bcr_status")]
mult_cx = coxph(Surv(days_to_follow_up, bcr_status) ~  ., data=univ_mat)
test.cp = cox.zph(mult_cx, transform = "km")
test.cp
remove = rownames(test.cp$table)[which(test.cp$table[,"p"] <= 0.05)]
genes = setdiff(genes, remove)
univ_mat = univ_mat[,c(genes, "days_to_follow_up", "bcr_status")]
mult_cx = coxph(Surv(days_to_follow_up, bcr_status) ~  ., data=univ_mat)
test.cp = cox.zph(mult_cx)
test.cp
remove = rownames(test.cp$table)[which(test.cp$table[,"p"] <= 0.05)]
genes = setdiff(genes, remove)
univ_mat = univ_mat[,c(genes, "days_to_follow_up", "bcr_status")]
mult_cx = coxph(Surv(days_to_follow_up, bcr_status) ~  ., data=univ_mat)
test.cp = cox.zph(mult_cx)
test.cp
##########################################################################
# Plot hazard ratios
##########################################################################
univ_formulas <- sapply(genes, function(x) as.formula(paste('Surv(days_to_follow_up, bcr_status)~', x)))
univ_models <- lapply(univ_formulas, function(x){coxph(x, data = univ_mat)})
#pdf("/data/github/pca_network/results/TCGA_DFS3/univariate_forest_model.pdf", width=8, height=5)
forestmodel::forest_model(model_list = univ_models,covariates = genes,merge_models =T)
##########################################################################
# Cox ph multiple regression
##########################################################################
set.seed(123)
mult_cox = coxph(Surv(days_to_follow_up, bcr_status) ~., data=univ_mat)
summary(mult_cox)
step = stepAIC(mult_cox, direction = "both")
summary(step)
step_df = summary(step)$coeff
step_df = cbind(step_df, confint(step))
forestmodel::forest_model(coxph(Surv(days_to_follow_up, bcr_status) ~ REG4 + SLC2A4 + PAPSS1 + TRIM13 + INPP5E + JAG2 + CTHRC1, data=univ_mat))
final_model = coxph(Surv(days_to_follow_up, bcr_status) ~ REG4 + SLC2A4 + JAG2 + CTHRC1, data=univ_mat)
summary(final_model)
##########################################################################
# Stratify patients
##########################################################################
cox = as.data.frame(univ_mat[,genes])
cox$risk_score = risk_scores
cox = cbind(cox, atlas_meta[,c("days_to_follow_up", "bcr_status")])
q = quantile(risk_scores, c(.25, .5, .75), type=1)
cox$risk_category = ifelse(cox$risk_score >= median(cox$risk_score), "High risk", "Low risk")
genes = rownames(model_df)
model_df = summary(final_model)$coeff
genes = rownames(model_df)
##########################################################################
# Stratify patients
##########################################################################
cox = as.data.frame(univ_mat[,genes])
cox$risk_score = risk_scores
cox = cbind(cox, atlas_meta[,c("days_to_follow_up", "bcr_status")])
final_model = coxph(Surv(days_to_follow_up, bcr_status) ~ REG4 + SLC2A4 + JAG2 + CTHRC1, data=univ_mat)
summary(final_model)
risk_scores = predict(final_model, newdata = univ_mat, type="lp")
model_df = summary(final_model)$coeff
genes = rownames(model_df)
##########################################################################
# Stratify patients
##########################################################################
cox = as.data.frame(univ_mat[,genes])
cox$risk_score = risk_scores
cox = cbind(cox, atlas_meta[,c("days_to_follow_up", "bcr_status")])
q = quantile(risk_scores, c(.25, .5, .75), type=1)
cox$risk_category = ifelse(cox$risk_score >= median(cox$risk_score), "High risk", "Low risk")
ROC.1 <- timeROC(T=cox$days_to_follow_up,
delta=cox$bcr_status,
marker=cox$risk_score,
cause=1,weighting="marginal",
times=c(365),
iid=TRUE)
ROC.1$TP
ROC.1$FP
ROC.1 <- timeROC(T=cox$days_to_follow_up,
delta=cox$bcr_status,
marker=cox$risk_score,
cause=1,weighting="marginal",
times=c(365),
iid=TRUE)
ROC.2  <- timeROC(T=cox$days_to_follow_up,
delta=cox$bcr_status,
marker=cox$risk_score,
cause=1,weighting="marginal",
times=c(floor(365*3)),
iid=TRUE)
ROC.3 <- timeROC(T=cox$days_to_follow_up,
delta=cox$bcr_status,
marker=cox$risk_score,
cause=1,weighting="marginal",
times=c(floor(365*5)),
iid=TRUE)
ROC.4 <- timeROC(T=cox$days_to_follow_up,
delta=cox$bcr_status,
marker=cox$risk_score,
cause=1,weighting="marginal",
times=c(floor(365*8)),
iid=TRUE)
#pdf("/data/github/pca_network/results/TCGA_DFS/ROC_135.pdf", width=7, height=6)
plot(ROC.1, time=365, title = F, lwd=2)
plot(ROC.2, time=floor(365*3), col="blue", add = T, title=F, lwd=2)
plot(ROC.3, time=floor(365*5), col="forestgreen", add = T, title=F, lwd=2)
plot(ROC.4, time=floor(365*8), col="black", add = T, title=F, lwd=2)
my_legend =  c(paste0("1 year AUC: ", round(ROC.1$AUC[2],2), "; 95% CI: ", paste(as.numeric(confint(ROC.1)$CI_AUC), collapse = "-")),
paste0("3 year AUC: ", round(ROC.2$AUC[2],2), "; 95% CI: ", paste(as.numeric(confint(ROC.2)$CI_AUC), collapse = "-")),
paste0("5 year AUC:", round(ROC.3$AUC[2],2), "; 95% CI: ", paste(as.numeric(confint(ROC.3)$CI_AUC), collapse = "-")),
paste0("8 year AUC:", round(ROC.4$AUC[2],2), "; 95% CI: ", paste(as.numeric(confint(ROC.4)$CI_AUC), collapse = "-")))
legend("bottomright", legend = my_legend,col=c("red","blue", "forestgreen", "black"),lwd=2, cex=1)
roc = pROC::roc(response=cox$bcr_status,
predictor=cox$risk_score)
pROC::plot.roc(roc)
pROC::plot.roc(roc, col="blue")
roc$auc
DANN = data.frame(matrix("foo": rep(1,2)))
DANN = data.frame(as.matrix(rnorm(1000,mean(x)))
DANN = data.frame(as.matrix(rnorm(1000,mean(x))))
DANN = data.frame(as.matrix(rnorm(1000,mean(x))))
DANN = data.frame(rnorm(1000,mean(x))), rnorm(1000,mean(x)))
DANN = data.frame(rnorm(1000,mean(x)), rnorm(1000,mean(x)))
set.seed(123)
x = rpois(100,5)
DANN = data.frame(rnorm(1000,mean(x)), rnorm(1000,mean(x)))
View(DANN)
DANN = data.frame(rnorm(1000,mean(x)), sample(1:0, 1000, replace = T))
View(DANN)
coln = c("predictor", "response")
colnames(DANN) = coln
set.seed(123)
coln = c("predictor", "response")
x = rpois(100,5)
DANN = data.frame(rnorm(1000,mean(x)), sample(1:0, 1000, replace = T))
colnames(DANN) = coln
CADD = data.frame(rnorm(1000,mean(x)), sample(1:0, 1000, replace = T))
colnames(CADD) = coln
FATH = data.frame(rnorm(1000,mean(x)), sample(1:0, 1000, replace = T))
colnames(FATH) = coln
library(pROC)
roc1 = roc(response=DANN$response, predictor=DANN$predictor)
roc2 = roc(CADD$response, CADD$predictor)
roc3 = roc(FATH$response, FATH$predictor)
pROC::plot.roc(roc1)
pROC::plot.roc(roc2)
pROC::plot.roc(roc3)
mean(x)
rpois(100,5)
rpois(100,2)
set.seed(123)
coln = c("predictor", "response")
x = rpois(100,2)
DANN = data.frame(rnorm(1000,mean(x)), sample(1:0, 1000, replace = T))
colnames(DANN) = coln
CADD = data.frame(rnorm(1000,mean(x)), sample(1:0, 1000, replace = T))
colnames(CADD) = coln
FATH = data.frame(rnorm(1000,mean(x)), sample(1:0, 1000, replace = T))
colnames(FATH) = coln
library(pROC)
roc1 = roc(response=DANN$response, predictor=DANN$predictor)
roc2 = roc(CADD$response, CADD$predictor)
roc3 = roc(FATH$response, FATH$predictor)
pROC::plot.roc(roc3)
table(cox$bcr_status)
DANN = data.frame(rnorm(1000,mean(x)), sample(1:0, 1000, replace = T, prob=c(0.8,0.2)))
roc1 = roc(response=DANN$response, predictor=DANN$predictor)
View(DANN)
set.seed(123)
coln = c("predictor", "response")
x = rpois(100,2)
DANN = data.frame(rnorm(1000,mean(x)), sample(1:0, 1000, replace = T, prob=c(0.8,0.2)))
colnames(DANN) = coln
CADD = data.frame(rnorm(1000,mean(x)), sample(1:0, 1000, replace = T))
colnames(CADD) = coln
FATH = data.frame(rnorm(1000,mean(x)), sample(1:0, 1000, replace = T))
colnames(FATH) = coln
library(pROC)
roc1 = roc(response=DANN$response, predictor=DANN$predictor)
roc2 = roc(CADD$response, CADD$predictor)
roc3 = roc(FATH$response, FATH$predictor)
pROC::plot.roc(roc1)
x = rpois(100,2)
DANN = data.frame(rnorm(1000,mean(x)), sample(1:0, 1000, replace = T, prob=c(0.2,0.8)))
colnames(DANN) = coln
CADD = data.frame(rnorm(1000,mean(x)), sample(1:0, 1000, replace = T))
colnames(CADD) = coln
FATH = data.frame(rnorm(1000,mean(x)), sample(1:0, 1000, replace = T))
colnames(FATH) = coln
library(pROC)
roc1 = roc(response=DANN$response, predictor=DANN$predictor)
roc2 = roc(CADD$response, CADD$predictor)
roc3 = roc(FATH$response, FATH$predictor)
pROC::plot.roc(roc1)
set.seed(102)
coln = c("predictor", "response")
x = rpois(100,2)
DANN = data.frame(rnorm(1000,mean(x)), sample(1:0, 1000, replace = T, prob=c(0.2,0.8)))
colnames(DANN) = coln
CADD = data.frame(rnorm(1000,mean(x)), sample(1:0, 1000, replace = T))
colnames(CADD) = coln
FATH = data.frame(rnorm(1000,mean(x)), sample(1:0, 1000, replace = T))
colnames(FATH) = coln
library(pROC)
roc1 = roc(response=DANN$response, predictor=DANN$predictor)
roc2 = roc(CADD$response, CADD$predictor)
roc3 = roc(FATH$response, FATH$predictor)
pROC::plot.roc(roc1)
mean(cox$risk_score)
rnorm(10, 0)
rnorm(10, 0, 2)
rnorm(100, 0, 2)
set.seed(102)
coln = c("predictor", "response")
DANN = data.frame(rnorm(1000,0,2), sample(1:0, 1000, replace = T, prob=c(0.2,0.8)))
colnames(DANN) = coln
table(DANN$predictor)
table(DANN$response)
DANN = data.frame(rnorm(1000,0,2), sample(1:0, 1000, replace = T, prob=c(0.15,0.85)))
set.seed(102)
coln = c("predictor", "response")
DANN = data.frame(rnorm(1000,0,2), sample(1:0, 1000, replace = T, prob=c(0.15,0.85)))
colnames(DANN) = coln
roc1 = roc(response=DANN$response, predictor=DANN$predictor)
pROC::plot.roc(roc1)
pROC::plot.roc(roc1)
pROC::plot.roc(roc1, col="green")
confint(roc$auc)
roc$auc
split(roc$auc, " ")
round(split(roc$auc, " "),2)
round(as.numeric(split(roc$auc, " "),2))
round(as.numeric(split(roc$auc, " "),3))
round(as.numeric(split(roc$auc, " "),1))
round(as.numeric(split(roc$auc, " ")))
as.numeric(split(roc$auc, ""))
round(as.numeric(split(roc$auc, "")),2)
round(as.numeric(split(roc$auc, "")),3)
DANN = data.frame(sample(1:0, 1000), sample(1:0, 1000))
set.seed(102)
coln = c("predictor", "response")
DANN = data.frame(sample(1:0, 1000, replace = T), sample(1:0, 1000, replace = T))
colnames(DANN) = coln
roc1 = roc(response=DANN$response, predictor=DANN$predictor)
pROC::plot.roc(roc1, col="green")
set.seed(102)
foo = sample(1:0, 1000, replace = T)
set.seed(10292)
bar = sample(1:0, 1000, replace = T)
coln = c("predictor", "response")
DANN = data.frame(foo, bar)
colnames(DANN) = coln
roc1 = roc(response=DANN$response, predictor=DANN$predictor)
pROC::plot.roc(roc1, col="green")
roc1
df = data.frame(ID=seq(1:21), c=c(rep(1,10), rep(0,11)))
View(df)
df = data.frame(ID=seq(1:21), c=c(rep(1,10), rep(0,11)), tool1=c(rep(1,9), 0, rep(1,5), rep(0,4), 1, 1), tool2=c(rep(1,9), 0, rep(1,5), rep(0,4), 1,1))
library(pROC)
roc1 = roc(df$c, df$tool1)
roc2 = roc(df$c, df$tool2)
plot.roc(roc1)
df = data.frame(ID=seq(1:21), c=c(rep(1,10), rep(0,11)), tool1=c(rep(1,9), 0, rep(1,5), rep(0,4), 1, 1), tool2=c(rep(1,9), 0, rep(1,5), rep(0,4), 1,1), tool3=c(rep(1,9), 0, rep(1,4), 0, 0, rep(1,5)
))
roc1 = roc(df$c, df$tool1)
roc2 = roc(df$c, df$tool2)
roc3 = roc(df$c, df$tool3)
plot.roc(roc1, col="black")
plot(roc2, col="blue")
plot(roc3, col="red")
plot(roc1, col="black")
plot(roc2, col="blue")
plot(roc3, col="red")
plot(roc1, col="black")
plot(roc2, col="blue")
plot(roc3, col="red")
roc1 = timeROC::timeROC(delta=df$c, marker=df$tool1)
pROC::plot.roc(roc1, col="black")
plot(roc2, col="blue")
plot(roc3, col="red")
setwd("/data/github/pca_network/")
